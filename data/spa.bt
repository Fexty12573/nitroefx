//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: SPL Archives
//   Authors: Fexty
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.spa
//  ID Bytes: 20 41 50 53
//   History: 
//------------------------------------------------

typedef uint32 u32;
typedef uint16 u16;
typedef ubyte u8;
typedef int fx32;
typedef short fx16;
typedef byte s8;
typedef short s16;
typedef int s32;
typedef float f32;

#define FX32_SHIFT          12
#define FX32_INT_SIZE       19
#define FX32_DEC_SIZE       12

#define FX32_INT_MASK       0x7ffff000
#define FX32_DEC_MASK       0x00000fff
#define FX32_SIGN_MASK      0x80000000

#define FX32_MAX            ((fx32)0x7fffffff)
#define FX32_MIN            ((fx32)0x80000000)

f32 FX_FX32_TO_F32(fx32 x) { return  ((f32)((x) / (f32)(1 << FX32_SHIFT))); }
fx32 FX_F32_TO_FX32(f32 x) { return   ((fx32)(((x) > 0) ?
                                     ((x) * (1 << FX32_SHIFT) + 0.5f) :
                                     ((x) * (1 << FX32_SHIFT) - 0.5f))); }
fx32 FX32_CONST(f32 x) { return       FX_F32_TO_FX32(x); }


#define FX16_SHIFT          12
#define FX16_INT_SIZE       3
#define FX16_DEC_SIZE       12

#define FX16_INT_MASK       0x7000
#define FX16_DEC_MASK       0x0fff
#define FX16_SIGN_MASK      0x8000

#define FX16_MAX            ((fx16)0x7fff)
#define FX16_MIN            ((fx16)0x8000)

f32 FX_FX16_TO_F32(fx16 x) { return   ((f32)((x) / (f32)(1 << FX16_SHIFT))); }
fx16 FX_F32_TO_FX16(f32 x) { return    ((fx16)(((x) > 0) ?
                                     (fx16)((x) * (1 << FX16_SHIFT) + 0.5f) :
                                     (fx16)((x) * (1 << FX16_SHIFT) - 0.5f))); }
fx16 FX16_CONST(f32 x) { return      FX_F32_TO_FX16(x); }

struct SPLFileHeader {
    u32 magic;
    u32 version;
    u16 resCount;
    u16 texCount;
    u32 reserved0;
    u32 resSize;
    u32 texSize;
    u32 texOffset;
    u32 reserved1;
};

struct VecFx32 { 
    fx32 x<read=readFX32,write=writeFX32>; 
    fx32 y<read=readFX32,write=writeFX32>; 
    fx32 z<read=readFX32,write=writeFX32>; 
};

struct VecFx16 { 
    fx16 x<read=readFX16,write=writeFX16>; 
    fx16 y<read=readFX16,write=writeFX16>; 
    fx16 z<read=readFX16,write=writeFX16>; 
};

struct GXRgb {
    u16 r : 5;
    u16 g : 5;
    u16 b : 5;
    u16 _ : 1;
};

struct GXRgba {
    u16 r : 5;
    u16 g : 5;
    u16 b : 5;
    u16 a : 1;
};

struct SPLResourceFlags {
        u32 emissionType : 4; // Maps to SPLEmissionType
        u32 drawType : 2;
        u32 circleAxis : 2; // Maps to SPLEmissionAxis
        u32 hasScaleAnim : 1;
        u32 hasColorAnim : 1;
        u32 hasAlphaAnim : 1;
        u32 hasTexAnim : 1;
        u32 hasRotation : 1;
        u32 randomInitAngle : 1;
        // Whether the emitter manages itself or not.
        // If set, the emitter will automatically terminate when it reaches the end of its life
        // and all of its particles have died
        u32 selfMaintaining : 1;
        u32 followEmitter : 1;
        u32 hasChildResource : 1;
        u32 polygonRotAxis : 2; // The axis to rotate the polygon around when using the 'polygon' draw types
        u32 polygonReferencePlane : 1;
        u32 randomizeLoopedAnim : 1;
        u32 drawChildrenFirst : 1; // If set, child particles will be rendered before parent particles
        u32 hideParent : 1; // If set, only child particles will be rendered
        u32 useViewSpace : 1; // If set, the rendering calculations will be done in view space
        u32 hasGravityBehavior : 1;
        u32 hasRandomBehavior : 1;
        u32 hasMagnetBehavior : 1;
        u32 hasSpinBehavior : 1;
        u32 hasCollisionPlaneBehavior : 1;
        u32 hasConvergenceBehavior : 1;
        u32 hasFixedPolygonID : 1;
        u32 childHasFixedPolygonID : 1;
};

struct SPLResourceHeader {
    SPLResourceFlags flags;
    VecFx32 emitterBasePos;
    fx32 emissionCount<read=readFX32,write=writeFX32>; // Number of particles to emit per emission interval
    fx32 radius<read=readFX32,write=writeFX32>; // Used for circle, sphere, and cylinder emissions
    fx32 length<read=readFX32,write=writeFX32>; // Used for cylinder emission
    VecFx16 axis;
    GXRgb color;
    fx32 initVelPosAmplifier<read=readFX32,write=writeFX32>;
    fx32 initVelAxisAmplifier<read=readFX32,write=writeFX32>;
    fx32 baseScale<read=readFX32,write=writeFX32>;
    fx16 aspectRatio<read=readFX16,write=writeFX16>;
    u16 startDelay; // Delay, in frames, before the emitter starts emitting particles
    s16 minRotation;
    s16 maxRotation;
    u16 initAngle;
    u16 reserved;
    u16 emitterLifeTime;
    u16 particleLifeTime;

    // All of these values are mapped to the range [0, 1]
    // They are used to attenuate the particle's properties at initialization,
    // acting as a sort of randomization factor which scales down the initial values
    struct {
        u32 baseScale : 8; // Damping factor for the base scale of the particles (0 = no damping)
        u32 lifeTime : 8;
        u32 initVel : 8; // Attenuation factor for the initial velocity of the particles (0 = no attenuation)
        u32 : 8;
    } variance;

    struct {
        u32 emissionInterval : 8;
        u32 baseAlpha : 8;
        u32 airResistance : 8; // Air resistance factor (0=0.75, 255=1.25)
        u32 textureIndex : 8;
        u32 loopFrames : 8;
        u32 dbbScale : 16;
        u32 textureTileCountS : 2; // Number of times to tile the texture in the S direction
        u32 textureTileCountT : 2; // Number of times to tile the texture in the T direction
        u32 scaleAnimDir : 3; // Maps to SPLScaleAnimDir
        u32 dpolFaceEmitter : 1; // If set, the polygon will face the emitter
        u32 flipTextureS : 1;
        u32 flipTextureT : 1;
        u32 : 30;
    } misc;
    fx16 polygonX<read=readFX16,write=writeFX16>;
    fx16 polygonY<read=readFX16,write=writeFX16>;
    struct {
        u32 flags : 8;
        u32 : 24;
    } userData;
};

struct SPLCurveInOut { u8 in; u8 out; };
struct SPLCurveInPeakOut { u8 in; u8 peak; u8 out; u8 _; };

struct SPLScaleAnim {
    fx16 start<read=readFX16,write=writeFX16>;
    fx16 mid<read=readFX16,write=writeFX16>;
    fx16 end<read=readFX16,write=writeFX16>;
    SPLCurveInOut curve;
    struct {
        u16 loop : 1;
        u16 : 15;
    } flags;
    u16 padding;
};

struct SPLColorAnim {
    GXRgb start;
    GXRgb end;
    SPLCurveInPeakOut curve;
    struct {
        u16 randomStartColor : 1;
        u16 loop : 1;
        u16 interpolate : 1;
        u16 : 13;
    } flags;
    u16 padding;
};

struct SPLAlphaAnim {
    union {
        u16 all;
        struct {
            u16 start : 5;
            u16 mid : 5;
            u16 end : 5;
            u16 : 1;
        } data;
    } alpha;
    struct {
        u16 randomRange : 8;
        u16 loop : 1;
        u16 : 7;
    } flags;
    SPLCurveInOut curve;
    u16 padding;
};

struct SPLTexAnim {
    u8 textures[8];
    struct {
        u32 frameCount : 8;
        u32 step : 8; // Number of frames between each texture frame
        u32 randomizeInit : 1; // Randomize the initial texture frame
        u32 loop : 1;
        u32 : 14;
    } param;
};

struct SPLChildResourceFlags {
        u16 usesBehaviors : 1;
        u16 hasScaleAnim : 1;
        u16 hasAlphaAnim : 1;
        u16 rotationType : 2;
        u16 followEmitter : 1;
        u16 useChildColor : 1;
        u16 drawType : 2;
        u16 polygonRotAxis : 2;
        u16 polygonReferencePlane : 1;
        u16 : 4;
};

struct SPLChildResource {
    SPLChildResourceFlags flags;
    fx16 randomInitVelMag<read=readFX16,write=writeFX16>; // Randomization factor for the initial velocity magnitude (0 = no randomization)
    fx16 endScale<read=readFX16,write=writeFX16>; // For scaling animations
    u16 lifeTime;
    u8 velocityRatio; // Ratio of the parent particle's velocity to inherit (255 = 100%)
    u8 scaleRatio; // Ratio of the parent particle's scale to inherit (255 = 100%)
    GXRgb color;
    struct {
        u32 emissionCount : 8; // Number of particles to emit per emission interval
        u32 emissionDelay : 8; // Delay, as a fraction of the particle's lifetime, before the particle starts emitting
        u32 emissionInterval : 8;
        u32 texture : 8;
        u32 textureTileCountS : 2;
        u32 textureTileCountT : 2;
        u32 flipTextureS : 1;
        u32 flipTextureT : 1;
        u32 dpolFaceEmitter : 1; // If set, the polygon will face the emitter
        u32 : 25;
    } misc;
};

// Applies a gravity behavior to particles
struct SPLGravityBehavior {
    VecFx16 magnitude;
    u16 padding;
};

// Applies a random movement behavior to particles
struct SPLRandomBehavior {
    VecFx16 magnitude;
    u16 applyInterval; // The interval, in frames, at which the random behavior is applied
};

// Applies a magnetic force to particles
struct SPLMagnetBehavior {
    VecFx32 target;
    fx16 force<read=readFX16,write=writeFX16>;
    u16 padding;
};

// Applies a rotational force to particles
struct SPLSpinBehavior {
    u16 angle; // The angle of rotation, in "index" units, where 0x10000 is a full rotation. Applied every frame
    u16 axis; // The axis of rotation
};

// Applies a collision behavior to particles
struct SPLCollisionPlaneBehavior {
    fx32 y<read=readFX32,write=writeFX32>; // The Y position of the collision plane
    fx16 elasticity<read=readFX16,write=writeFX16>; // The elasticity of the collision, 1.0 being perfectly elastic and 0.0 being perfectly inelastic

    struct {
        u16 collisionType : 2;
        u16 : 14;
    } flags;
};

// Applies a convergence behavior to particles
// Similar to SPLMagnetBehavior, but it acts directly on the particle's position instead of its acceleration
struct SPLConvergenceBehavior {
    VecFx32 target;
    fx16 force<read=readFX16,write=writeFX16>;
    u16 padding;
};

struct SPLResource {
    SPLResourceHeader header;
    if (header.flags.hasScaleAnim) {
        SPLScaleAnim scaleAnim;
    }
    
    if (header.flags.hasColorAnim) {
        SPLColorAnim colorAnim;
    }
    
    if (header.flags.hasAlphaAnim) {
        SPLAlphaAnim alphaAnim;
    }
    
    if (header.flags.hasTexAnim) {
        SPLTexAnim texAnim;
    }
    
    if (header.flags.hasChildResource) {
        SPLChildResource childResource;
    }
    
    if (header.flags.hasGravityBehavior) {
        SPLGravityBehavior gravityBehavior;
    }
    
    if (header.flags.hasRandomBehavior) {
        SPLRandomBehavior randomBehavior;
    }
    
    if (header.flags.hasMagnetBehavior) {
        SPLMagnetBehavior magnetBehavior;
    }
    
    if (header.flags.hasSpinBehavior) {
        SPLSpinBehavior spinBehavior;
    }
    
    if (header.flags.hasCollisionPlaneBehavior) {
        SPLCollisionPlaneBehavior collisionPlaneBehavior;
    }
    
    if (header.flags.hasConvergenceBehavior) {
        SPLConvergenceBehavior convergenceBehavior;
    }
};

struct SPLTextureParam {
    u32 format : 4; // Maps to GXTexFmt
    u32 s : 4; // Maps to GXTexSizeS
    u32 t : 4; // Maps to GXTexSizeT
    u32 repeat : 2; // Maps to GXTexRepeat
    u32 flip : 2; // Maps to GXTexFlip
    u32 palColor0 : 1; // Maps to GXTexPlttColor0
    u32 useSharedTexture : 1;
    u32 sharedTexID : 8;
    u32 : 6;
};

struct SPLTexture {
    local int64 start = FTell();
    u32 id;
    SPLTextureParam param;
    u32 textureSize; // size of the texture data
    u32 paletteOffset; // offset to the palette data from the start of the header
    u32 paletteSize; // size of the palette data
    u32 unused0;
    u32 unused1;
    u32 resourceSize; // total size of the resource (header + data)
    
    u8 textureData[textureSize];
    FSeek(start + paletteOffset);
    u8 paletteData[paletteSize];
};

SPLFileHeader header;
SPLResource resources[header.resCount]<optimize=false>;
SPLTexture textures[header.texCount]<optimize=false>;

string readFX32(fx32 v) {
    f32 fv = FX_FX32_TO_F32(v);
    return Str("%f", fv);
}

string readFX16(fx16 v) {
    f32 fv = FX_FX16_TO_F32(v);
    return Str("%f", fv);
}

fx32 writeFX32(string v) {
    return FX_F32_TO_FX32(Atof(v));
}

fx16 writeFX16(string v) {
    return FX_F32_TO_FX16(Atof(v));
}
