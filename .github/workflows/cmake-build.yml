name: CMake Build
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        # ubuntu-latest doesn't have mono installed anymore so we use ubuntu-22.04
        os: [ubuntu-latest, windows-latest]
        build_type: [dist]
    
    env:
      USERNAME: Fexty12573
      VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      FEED_URL: https://nuget.pkg.github.com/Fexty12573/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/Fexty12573/index.json,readwrite"

    steps:      
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Linux system dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxmu-dev libxi-dev libgl-dev zip autoconf automake libtool pkg-config libglu1-mesa-dev libltdl-dev mono-complete
      shell: bash

    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh || ./vcpkg/bootstrap-vcpkg.bat
      shell: bash

    - name: Set VCPKG_ROOT environment variable
      run: echo "VCPKG_ROOT=$GITHUB_WORKSPACE/vcpkg" >> $GITHUB_ENV
      shell: bash

    - name: Add vcpkg nuget sources (Linux)
      if: matrix.os == 'ubuntu-22.04'
      shell: bash
      run: |
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          sources add \
          -Source "${{ env.FEED_URL }}" \
          -StorePasswordInClearText \
          -Name GitHubPackages \
          -UserName "${{ env.USERNAME }}" \
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
          -Source "${{ env.FEED_URL }}"
    
    - name: Add vcpkg nuget sources (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Select CMake preset
      id: select-preset
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          echo "preset=windows-x64-${{ matrix.build_type }}" >> $GITHUB_OUTPUT
        else
          echo "preset=linux-x64-${{ matrix.build_type }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
    
    - name: Setup MSVC environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Fix PATH to avoid Git's link.exe on Windows
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $cleanedPath = ($env:Path -split ';' | Where-Object { $_ -notlike '*Git\\usr\\bin*' }) -join ';'
        "PATH=$cleanedPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Configure CMake
      run: cmake --preset ${{ steps.select-preset.outputs.preset }}
      shell: bash

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $env:Path = ($env:Path -split ';' | Where-Object { $_ -notlike '*Git\\usr\\bin*' }) -join ';'
        cmake --build build

    - name: Build (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: cmake --build build
      shell: bash
